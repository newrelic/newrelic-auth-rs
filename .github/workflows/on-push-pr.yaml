name: ðŸ§ª On PR testing

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  codespell:
    name: codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: codespell-project/actions-codespell@v2.1

  cargo-fmt:
    runs-on: ubuntu-latest
    name: cargo fmt
    steps:
      - uses: actions/checkout@v4

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt
          toolchain: ${{ env.RUST_VERSION }}
      - name: Check code formatting
        run: cargo fmt --check

  cargo-clippy:
    runs-on: ubuntu-latest
    name: cargo clippy
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: cargo clippy with compiler warnings
        run: cargo clippy --workspace --all-targets -- -D warnings -D clippy::all

  build_and_test:
    permissions:
      contents: read
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - run: cargo build --verbose
      - run: cargo test --all-targets --verbose
      - run: cargo test --doc
