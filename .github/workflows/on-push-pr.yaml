name: üß™ On PR testing
permissions:
  contents: read
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  codespell:
    name: codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: codespell-project/actions-codespell@v2.1

  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - run: cargo build --verbose
      - run: cargo test --all-targets --verbose
      - run: cargo test --doc

  cargo-fmt:
    runs-on: ubuntu-latest
    name: Format test / stable
    steps:
      - uses: actions/checkout@v4
      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV
      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
      - run: cargo fmt --check

  cargo-clippy:
    runs-on: ubuntu-latest
    name: clippy / ${{ matrix.toolchain }}
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4
      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV
      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
      - run: cargo clippy --workspace --all-targets -- -D warnings -D clippy::all

  security:
    uses: ./.github/workflows/component_security.yml

  third-party-notices-check:
    name: ‚öñÔ∏è Third party licenses
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: newrelic/rust-licenses-noticer@v1
        with:
          template-file: THIRD_PARTY_NOTICES.md.tmpl

  check-all-green:
    name: üü¢ All required checks and tests pass
    if: always()

    needs:
      - cargo-clippy
      - cargo-fmt
      - codespell
      - security
      - third-party-notices-check
      - build-and-test

    runs-on: Ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
