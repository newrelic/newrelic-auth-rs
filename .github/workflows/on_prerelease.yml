on:
  release:
    types:
      - prereleased

name: on_prerelease
permissions:
  contents: write
jobs:
  build-binaries:
    runs-on: ubuntu-latest
    name: Build/Push binaries
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Build newrelic auth cli
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          which cross || cargo install cross
          export RUSTFLAGS="-C target-feature=+crt-static"
          cross build --target "aarch64-unknown-linux-musl" --profile release 
          cross build --target "x86_64-unknown-linux-musl" --profile release 
          
          cp ./target/aarch64-unknown-linux-musl/release/newrelic-auth-cli ./newrelic-auth-cli-arm64
          cp ./target/x86_64-unknown-linux-musl/release/newrelic-auth-cli ./newrelic-auth-cli-amd64
          
          gh release upload ${{ github.event.release.tag_name }} newrelic-auth-cli-arm64
          gh release upload ${{ github.event.release.tag_name }} newrelic-auth-cli-amd64
